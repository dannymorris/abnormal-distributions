<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Abnormal Distributions</title>
    <link>/post/</link>
    <description>Recent content in Posts on Abnormal Distributions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Detecting Image Differences Using Python and OpenCV</title>
      <link>/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Deploying a Plumber API on AWS EC2 Instance</title>
      <link>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Deploying a Shiny App with Shiny Server on an AWS EC2 Instance</title>
      <link>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>My Data Science Tools and Techniques</title>
      <link>/post/2019/07/06/fast-clustering-methods/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/fast-clustering-methods/</guid>
      <description>ToolsProgramming LanguagesDevelopment EnvironmentsData Storage and RetrievalData VisualizationReports, Dashboards, and ApplicationsDevelopment ToolsTechniquesThis document briefly describes the tools and techniques I am currently using for data science. The percentages reflect the amount of time spent with each tool under each heading.
ToolsProgramming LanguagesR - 80%
Python - 10%
SQL - 5%
Command line tools (Git, Linux, Docker, Powershell, Conda) - 5%</description>
    </item>
    
    <item>
      <title>A Note on EDA versus Software Development</title>
      <link>/post/2019/07/03/a-note-on-eda-versus-software-development/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/03/a-note-on-eda-versus-software-development/</guid>
      <description>This summer, I have had the pleasure of mentoring Elan Anderson, an intern who joined through my company&amp;rsquo;s highly-sought summer internship program. He and I are building SimText, an app that performs record linkage using statistial text mining. The core algorithm, which is available as an R package, utilizes the text2vec framework for efficient text vectorization, base R for general purpose programming, and some C++ via Rcpp for efficient manipulation of sparse matrices.</description>
    </item>
    
    <item>
      <title>A Data-Centric Ensemble Approach for Supervised Classification with Imbalanced Classes</title>
      <link>/post/2019/07/01/rare-class-ensemble/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/01/rare-class-ensemble/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Row-wise Max Values in a Sparse Matrix Using RcppArmadillo</title>
      <link>/post/2019/07/01/row-wise-min-and-max-values-in-a-sparse-matrix/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/01/row-wise-min-and-max-values-in-a-sparse-matrix/</guid>
      <description>Using Inline FunctionsUsing sourceCpplibrary(Matrix)library(Rcpp)library(magrittr)i &amp;lt;- c(1,3:8) j &amp;lt;- c(2,9,6:10)x &amp;lt;- 7 * (1:7)sparse_dgc_matrix &amp;lt;- sparseMatrix(i, j, x = x) Using Inline Functionsrowwise_max &amp;lt;- Rcpp::cppFunction(&amp;quot;arma::sp_mat sp_row_max(arma::sp_mat X) {return arma::max(X, 1);}&amp;quot;, depends= &amp;quot;RcppArmadillo&amp;quot;)rowwise_max_idx &amp;lt;- Rcpp::cppFunction(&amp;quot;arma::urowvec sp_row_max_id(arma::sp_mat X) {return arma::index_max(X, 0);}&amp;quot;, depends= &amp;quot;RcppArmadillo&amp;quot;)rowwise_max(sparse_dgc_matrix) %&amp;gt;%as.vector()Matrix::t(sparse_dgc_matrix) %&amp;gt;%rowwise_max_idx() %&amp;gt;%as.vector()Using sourceCpprowwise_max.</description>
    </item>
    
    <item>
      <title>Example Gradient Boosted Classifier Using Python&#39;s Scikit Learn</title>
      <link>/post/2019/06/25/example-gradient-boosted-classifier-using-scikit-learn/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/06/25/example-gradient-boosted-classifier-using-scikit-learn/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Tidy Binomial Calculator Using the probs Package</title>
      <link>/post/2019/04/08/tidy-binomial-calculator/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/04/08/tidy-binomial-calculator/</guid>
      <description>InstallSimulated DataThis short post introduces a simple R package called probs that I created for tidy binomial probability calculations.
InstallThe probs package lives on GitHub.
library(devtools)devtools::install_github(&amp;quot;dannymorris/probs&amp;quot;)Simulated DataRecently, I needed to communicate to a larger audience the probability of detecting a particular event. Specifically, a pre-existing process was in place that required humans to sift through a sample of 100 PDF documents out of 40,000 documents.</description>
    </item>
    
    <item>
      <title>Bag of Words Text Classification in R</title>
      <link>/post/2019/02/17/text-classification-using-text2vec/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/17/text-classification-using-text2vec/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Tidy Text Mining in R</title>
      <link>/post/2019/02/10/tidy-text-mining-in-r/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/10/tidy-text-mining-in-r/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Basics of deploying Flask applications to localhost on Windows</title>
      <link>/post/2019/01/20/using-flask-to-deploy-predictive-models/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/01/20/using-flask-to-deploy-predictive-models/</guid>
      <description>PurposeEnvironmentCreate and activate conda environment in Anaconda PromptInstall dependenciesVery simple Flask appRun the appTest the appNext stepsPurposeDeploying production code is one of the toughest challenges that data scientists face. There seems to be significantly more content available on model development than model deployment. In this article, I document my experience building and deploying an web application written in Python using the Flask microframework.</description>
    </item>
    
    <item>
      <title>A specific comparison of feature engineering in R and Python</title>
      <link>/post/2018/01/09/a-specific-comparison-of-feature-engineering-in-r-and-python/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/09/a-specific-comparison-of-feature-engineering-in-r-and-python/</guid>
      <description>PurposeOriginal dataFeatures to engineerRPythonPurposeMoving from raw data to data that is prime for analysis is called feature engineering and it is a fundamental aspect of data science. Experienced data scientists will agree that feature engineering is an essential skill.
This article demonstrates the same engineering pipeline written in R and Python. The pipeline is not particularly complicated, though it resembles something that a data scientist would do.</description>
    </item>
    
    <item>
      <title>Getting started with Python in R Markdown using the reticulate package</title>
      <link>/post/2018/01/09/getting-started-with-python-in-r-markdown-using-the-reticulate-package/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/09/getting-started-with-python-in-r-markdown-using-the-reticulate-package/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
  </channel>
</rss>