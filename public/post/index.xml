<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Abnormal Distributions</title>
    <link>/post/</link>
    <description>Recent content in Posts on Abnormal Distributions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Science on AWS</title>
      <link>/post/2019/08/24/aws-tools-for-data-science/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/24/aws-tools-for-data-science/</guid>
      <description>This document describes some common goals of data science and how they can be acheived with tools and services on AWS.
General Principles  Tools and services empower innovative data science Event driven Serverless* Accomodates big data Accomodates unstructured and binary data (e.g. images)
 Servers may be involved, but they are configured to run on events
  List of Tools  S3 Lambda API Gateway EC2 EMR R Python Spark SageMaker RStudio Server Jupyter Notebook  Data Science Goals 1.</description>
    </item>
    
    <item>
      <title>Event-Driven Code Execution Using S3, Lambda, EC2, and R</title>
      <link>/post/2019/08/22/event-driven-code-execution-using-s3-lambda-ec2-r/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/22/event-driven-code-execution-using-s3-lambda-ec2-r/</guid>
      <description>This document describes how to launch a pre-configured EC2 instance triggred by an S3 event in order to execute an R script.
Pipeline Overview The pipeline executes in this way:
 A file is uploaded to an S3 bucket.
 The file upload triggers a Lambda function that starts an EC2 instance, runs an R script, and stops the EC2 instance.
 When run, the R script returns the output to an S3 bucket for consumption.</description>
    </item>
    
    <item>
      <title>Launch RStudio Server on AWS EMR Cluster</title>
      <link>/post/2019/08/11/launch-rstudio-server-on-aws-emr-cluster/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/11/launch-rstudio-server-on-aws-emr-cluster/</guid>
      <description>This post documents the steps to launch RStudio Server on an AWS EMR cluster.
Reference: Using sparklyr with an Apache Spark cluster
 Open AWS Console and navigate to the EMR service
 Select &amp;ldquo;Create cluster&amp;rdquo;
 Select &amp;ldquo;Go to advanced options&amp;rdquo; to customize the cluster configuration
 Under &amp;ldquo;Software Configuration&amp;rdquo;, select Spark. Other applications can be selected as needed. Click Next.
  5 . Configure the hardware requirements as needed and click Next.</description>
    </item>
    
    <item>
      <title>My Wedding Song</title>
      <link>/post/2019/08/11/my-wedding-song/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/11/my-wedding-song/</guid>
      <description>This post is not about data science. Instead, I am sharing the song I wrote and recorded for my wife when we were first dating. We ended up dancing to this song at our wedding.
Title: See You Smile
Author: Danny Morris
Musicians: Danny Morris (vocals, guitar), Chris Gee (bass), Ben Catoe (keys)
Recording engineer: Charlie Jackson</description>
    </item>
    
    <item>
      <title>HTTP Post Requests Using R, Python, and Node.js</title>
      <link>/post/2019/07/15/http-post-request-using-node-js/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/15/http-post-request-using-node-js/</guid>
      <description>library(knitr)const https = require(&amp;#39;http&amp;#39;)const data = JSON.stringify({doc_set_1: &amp;#39;hello&amp;#39;})const options = {hostname: &amp;#39;ec2-instance-dns.com&amp;#39;,port: &amp;#39;8000&amp;#39;,path: &amp;#39;/textsim&amp;#39;,method: &amp;#39;POST&amp;#39;,headers: {&amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;,&amp;#39;Content-Length&amp;#39;: data.length}}const req = https.request(options, (res) =&amp;gt; {console.log(`statusCode: ${res.statusCode}`)res.on(&amp;#39;data&amp;#39;, (d) =&amp;gt; {process.stdout.write(d)})})req.on(&amp;#39;error&amp;#39;, (error) =&amp;gt; {console.error(error)})req.write(data)req.end()Rresp &amp;lt;- httr::POST(url = &amp;quot;http://ec2-instance-dns:8000/predict&amp;quot;,body = iris[, 1:4])</description>
    </item>
    
    <item>
      <title>Detecting Image Differences Using Python and OpenCV</title>
      <link>/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/07/detecting-image-differences-using-python-and-opencv/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Deploying a Plumber API on AWS EC2 Instance</title>
      <link>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Deploying a Shiny App with Shiny Server on an AWS EC2 Instance</title>
      <link>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>My Data Science Tools and Techniques</title>
      <link>/post/2019/07/06/fast-clustering-methods/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/fast-clustering-methods/</guid>
      <description>ToolsProgramming LanguagesDevelopment EnvironmentsData Storage and RetrievalData VisualizationReports, Dashboards, and ApplicationsDevelopment ToolsTechniquesThis document briefly describes the tools and techniques I am currently using for data science. The percentages reflect the amount of time spent with each tool under each heading.
ToolsProgramming LanguagesR - 80%
Python - 10%
SQL - 5%
Command line tools (Git, Linux, Docker, Powershell, Conda) - 5%</description>
    </item>
    
    <item>
      <title>A Note on EDA versus Software Development</title>
      <link>/post/2019/07/03/a-note-on-eda-versus-software-development/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/03/a-note-on-eda-versus-software-development/</guid>
      <description>This summer, I have had the pleasure of mentoring Elan Anderson, an intern who joined through my company&amp;rsquo;s highly-sought summer internship program. He and I are building SimText, an app that performs record linkage using statistial text mining. The core algorithm, which is available as an R package, utilizes the text2vec framework for efficient text vectorization, base R for general purpose programming, and some C++ via Rcpp for efficient manipulation of sparse matrices.</description>
    </item>
    
    <item>
      <title>A Data-Centric Ensemble Approach for Supervised Classification with Imbalanced Classes</title>
      <link>/post/2019/07/01/rare-class-ensemble/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/01/rare-class-ensemble/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Row-wise Max Values for a Sparse Matrix Using RcppArmadillo</title>
      <link>/post/2019/07/01/row-wise-min-and-max-values-in-a-sparse-matrix/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/01/row-wise-min-and-max-values-in-a-sparse-matrix/</guid>
      <description>Using Inline FunctionsSourcing a .cpp FileThis document demonstrates how to extract maximum values for each row in a sparse matrix using RcppArmadillo for speed and efficiency.
library(Matrix)library(Rcpp)library(RcppArmadillo)library(magrittr)A sample sparse matrix implemented in the Matrix pacakge.
i &amp;lt;- c(1,3:8) j &amp;lt;- c(2,9,6:10)x &amp;lt;- 7 * (1:7)sparse_matrix &amp;lt;- sparseMatrix(i, j, x = x) sparse_matrix## 8 x 10 sparse Matrix of class &amp;quot;dgCMatrix&amp;quot;## ## [1,] .</description>
    </item>
    
    <item>
      <title>Example Gradient Boosted Classifier Using Python&#39;s Scikit Learn</title>
      <link>/post/2019/06/25/example-gradient-boosted-classifier-using-scikit-learn/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/06/25/example-gradient-boosted-classifier-using-scikit-learn/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Tidy Binomial Calculator Using the probs Package</title>
      <link>/post/2019/04/08/tidy-binomial-calculator/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/04/08/tidy-binomial-calculator/</guid>
      <description>InstallSimulated DataThis short post introduces a simple R package called probs that I created for tidy binomial probability calculations.
InstallThe probs package lives on GitHub.
library(devtools)devtools::install_github(&amp;quot;dannymorris/probs&amp;quot;)Simulated DataRecently, I needed to communicate to a larger audience the probability of detecting a particular event. Specifically, a pre-existing process was in place that required humans to sift through a sample of 100 PDF documents out of 40,000 documents.</description>
    </item>
    
    <item>
      <title>Bag of Words Text Classification in R</title>
      <link>/post/2019/02/17/text-classification-using-text2vec/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/17/text-classification-using-text2vec/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Tidy Text Mining in R</title>
      <link>/post/2019/02/10/tidy-text-mining-in-r/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/10/tidy-text-mining-in-r/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Basics of deploying Flask applications to localhost on Windows</title>
      <link>/post/2019/01/20/using-flask-to-deploy-predictive-models/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/01/20/using-flask-to-deploy-predictive-models/</guid>
      <description>PurposeEnvironmentCreate and activate conda environment in Anaconda PromptInstall dependenciesVery simple Flask appRun the appTest the appNext stepsPurposeDeploying production code is one of the toughest challenges that data scientists face. There seems to be significantly more content available on model development than model deployment. In this article, I document my experience building and deploying an web application written in Python using the Flask microframework.</description>
    </item>
    
    <item>
      <title>A specific comparison of feature engineering in R and Python</title>
      <link>/post/2018/01/09/a-specific-comparison-of-feature-engineering-in-r-and-python/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/09/a-specific-comparison-of-feature-engineering-in-r-and-python/</guid>
      <description>PurposeOriginal dataFeatures to engineerRPythonPurposeMoving from raw data to data that is prime for analysis is called feature engineering and it is a fundamental aspect of data science. Experienced data scientists will agree that feature engineering is an essential skill.
This article demonstrates the same engineering pipeline written in R and Python. The pipeline is not particularly complicated, though it resembles something that a data scientist would do.</description>
    </item>
    
    <item>
      <title>Getting started with Python in R Markdown using the reticulate package</title>
      <link>/post/2018/01/09/getting-started-with-python-in-r-markdown-using-the-reticulate-package/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/09/getting-started-with-python-in-r-markdown-using-the-reticulate-package/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
  </channel>
</rss>