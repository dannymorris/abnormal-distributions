<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Abnormal Distributions</title>
    <link>/categories/aws/</link>
    <description>Recent content in AWS on Abnormal Distributions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Re-engineering my Kaggle M5 Forecasting solution using distributed training on AWS</title>
      <link>/post/2020/07/19/re-engineering-my-kaggle-m5-forecasting-solution-using-distributed-training-on-aws/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/07/19/re-engineering-my-kaggle-m5-forecasting-solution-using-distributed-training-on-aws/</guid>
      <description>OverviewRecap of original solutionThe new solutionSome initial compromisesGetting data into S3Launching the training jobCreate modelWork in progress
OverviewI recently participated in the M5 Forecasting - Accuracy Kaggle competition to forecast daily sales for over 30,000 WalMart products. My best solution, which was a bottom-level design that modeled each product in isolation, placed in the top 28%. I was initially pleased with this outcome considering it was my first major competition, but I wasnâ€™t entirely satisfied, especially since my methodology was not too different from the top performers.</description>
    </item>
    
    <item>
      <title>Object detection using AWS SageMaker and GluonCV </title>
      <link>/post/2019/12/07/object-detection-using-aws-sagemaker-and-gluoncv/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/12/07/object-detection-using-aws-sagemaker-and-gluoncv/</guid>
      <description>This post briefly describes how I built an object detection model using AWS SageMaker and GluonCV to detect Blue Cross Blue Shield logos. Full code and notebooks can be found in the GitHub repo.
Collecting and preparing training images To collect images for training, I searched Google for &amp;ldquo;bluecross blueshied logo&amp;rdquo;, &amp;ldquo;bluecross blueshield letter&amp;rdquo;, &amp;ldquo;bluecross blueshield building&amp;rdquo;, &amp;ldquo;bluecross blueshield shirt&amp;rdquo;, &amp;ldquo;bluecross blueshield event&amp;rdquo;, &amp;ldquo;bluecross blueshield shirt&amp;rdquo;, and &amp;ldquo;bluecross blueshield bus&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Deploying a Shiny app using Shiny Server on an AWS EC2 instance</title>
      <link>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
    <item>
      <title>Deploying a plumber API on AWS EC2 instance</title>
      <link>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/06/deploying-a-plumber-api-on-aws-ec2-instance/</guid>
      <description>a.sourceLine { display: inline-block; line-height: 1.25; }a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }a.sourceLine:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }a.sourceLine { text-indent: -1em; padding-left: 1em; }}pre.</description>
    </item>
    
  </channel>
</rss>